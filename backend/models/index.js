// models/index.js
const { sequelize, DataTypes, testConnection } = require('./init');

//  –ú–û–î–ï–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (users)
const User = sequelize.define('User', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  login: {
    type: DataTypes.STRING(50),
    unique: true,
    allowNull: false
  },
  email: {
    type: DataTypes.STRING(255),
    unique: true,
    allowNull: false
  },
  password_hash: {
    type: DataTypes.STRING(255),
    allowNull: false
  },
  birth_date: {
    type: DataTypes.DATEONLY,
    allowNull: false
  },
  gender: {
    type: DataTypes.ENUM('M', '–ñ'),
    allowNull: false
  }
}, {
  tableName: 'users',       // –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ
  timestamps: true,         // –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
  createdAt: 'created_at',  // –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è "—Å–æ–∑–¥–∞–Ω–æ"
  updatedAt: false          // –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–µ "–æ–±–Ω–æ–≤–ª–µ–Ω–æ"
});

// –ú–û–î–ï–õ–¨ –≠–ú–û–¶–ò–ô (emotions)
const Emotion = sequelize.define('Emotion', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  name: {
    type: DataTypes.STRING(50),
    unique: true,
    allowNull: false
  },
  display_order: {
    type: DataTypes.INTEGER,
    defaultValue: 0
  }
}, {
  tableName: 'emotions',
  timestamps: false  // –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
});

//  –ú–û–î–ï–õ–¨ –°–ù–ê (sleep_quality)
const SleepQuality = sequelize.define('SleepQuality', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  name: {
    type: DataTypes.STRING(50),
    unique: true,
    allowNull: false
  },
  display_order: {
    type: DataTypes.INTEGER,
    defaultValue: 0
  }
}, {
  tableName: 'sleep_quality',
  timestamps: false
});

//  –ú–û–î–ï–õ–¨ –ó–ê–ü–ò–°–ï–ô –î–ù–ï–í–ù–ò–ö–ê (diary_entries)
const DiaryEntry = sequelize.define('DiaryEntry', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  entry_date: {
    type: DataTypes.DATEONLY,  // —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞ (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
    allowNull: false
  },
  text_entry: {
    type: DataTypes.TEXT       // –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
  }
}, {
  tableName: 'diary_entries',
  timestamps: true,
  createdAt: 'created_at',
  updatedAt: 'updated_at'
});

// üè∑Ô∏è –ú–û–î–ï–õ–¨ –•–ï–®–¢–ï–ì–û–í (hashtags)
const Hashtag = sequelize.define('Hashtag', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  tag_name: {
    type: DataTypes.STRING(50),
    allowNull: false
  },
  color: {
    type: DataTypes.STRING(7),
    defaultValue: '#000000'
  }
}, {
  tableName: 'hashtags',
  timestamps: true,
  createdAt: 'created_at',
  updatedAt: false
});

//  –ú–û–î–ï–õ–¨ –§–û–¢–û–ì–†–ê–§–ò–ô (gallery_photos)
const GalleryPhoto = sequelize.define('GalleryPhoto', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true
  },
  image_path: {
    type: DataTypes.STRING(500),
    allowNull: false
  },
  image_name: {
    type: DataTypes.STRING(255)
  },
  upload_order: {
    type: DataTypes.INTEGER
  }
}, {
  tableName: 'gallery_photos',
  timestamps: true,
  createdAt: 'uploaded_at',
  updatedAt: false
});

// –°–í–Ø–ó–ò –ú–ï–ñ–î–£ –ú–û–î–ï–õ–Ø–ú–ò

// 1. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ ‚Üí –ó–ê–ü–ò–°–ò (1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí –º–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π)
User.hasMany(DiaryEntry, { 
  foreignKey: 'user_id', 
  onDelete: 'CASCADE'  // –µ—Å–ª–∏ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∑–∞–ø–∏—Å–∏
});
DiaryEntry.belongsTo(User, { 
  foreignKey: 'user_id' 
});

// 2. –ó–ê–ü–ò–°–ò ‚Üí –≠–ú–û–¶–ò–ò (–º–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π ‚Üí –æ–¥–Ω–∞ —ç–º–æ—Ü–∏—è)
DiaryEntry.belongsTo(Emotion, { 
  foreignKey: 'emotion_id' 
});

// 3. –ó–ê–ü–ò–°–ò ‚Üí –°–û–ù (–º–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π ‚Üí –æ–¥–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞)
DiaryEntry.belongsTo(SleepQuality, { 
  foreignKey: 'sleep_id' 
});

// 4. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ ‚Üí –•–ï–®–¢–ï–ì–ò (1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí –º–Ω–æ–≥–æ —Ö–µ—à—Ç–µ–≥–æ–≤)
User.hasMany(Hashtag, { 
  foreignKey: 'user_id', 
  onDelete: 'CASCADE' 
});
Hashtag.belongsTo(User, { 
  foreignKey: 'user_id' 
});

// 5. –ó–ê–ü–ò–°–ò ‚Üî –•–ï–®–¢–ï–ì–ò (–º–Ω–æ–≥–∏–µ-–∫–æ-–º–Ω–æ–≥–∏–º —á–µ—Ä–µ–∑ entry_hashtags)
DiaryEntry.belongsToMany(Hashtag, {
  through: 'entry_hashtags',    // —á–µ—Ä–µ–∑ –∫–∞–∫—É—é —Ç–∞–±–ª–∏—Ü—É
  foreignKey: 'entry_id',       // –∫–ª—é—á –æ—Ç DiaryEntry
  otherKey: 'hashtag_id'        // –∫–ª—é—á –æ—Ç Hashtag
});

Hashtag.belongsToMany(DiaryEntry, {
  through: 'entry_hashtags',
  foreignKey: 'hashtag_id', 
  otherKey: 'entry_id'
});

// 6. –ó–ê–ü–ò–°–ò ‚Üí –§–û–¢–û (1 –∑–∞–ø–∏—Å—å ‚Üí –º–Ω–æ–≥–æ —Ñ–æ—Ç–æ)
DiaryEntry.hasMany(GalleryPhoto, { 
  foreignKey: 'entry_id', 
  onDelete: 'CASCADE' 
});
GalleryPhoto.belongsTo(DiaryEntry, { 
  foreignKey: 'entry_id' 
});

// –≠–ö–°–ü–û–†–¢ –í–°–ï–• –ú–û–î–ï–õ–ï–ô
module.exports = {
  sequelize,
  User,
  DiaryEntry,
  Emotion, 
  SleepQuality,
  Hashtag,
  GalleryPhoto,
  testConnection
};